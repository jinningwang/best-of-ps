# Based on https://github.com/best-of-lists/best-of-update-action/blob/v0.8.5/workflows/update-best-of-list.yml
name: update-best-of-list

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to use for this update"
        required: false
  schedule:
    - cron: "0 18 * * 4" # Every thursday at 6pm

env:
  BRANCH_PREFIX: "update/"
  DEFAULT_BRANCH: "main"

jobs:
  update-best-of-list:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ github.event.inputs != null  &&  github.event.inputs.version != null }}
        name: set-version-from-input
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      - if: ${{ ! (env.VERSION != null && env.VERSION != '') }}
        name: set-version-via-date
        run: echo "VERSION=$(date '+%Y.%m.%d')" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: check-version-tag
        shell: bash
        run: |
          git fetch --tags --force
          git show-ref --tags --verify --quiet -- "refs/tags/${{ env.VERSION }}" && echo "VERSION=$(date '+%Y.%m.%d-%H.%M')" >> $GITHUB_ENV || exit 0
      - name: create-update-branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          branch: "${{ env.BRANCH_PREFIX }}${{ env.VERSION }}"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_PREFIX }}${{ env.VERSION }}
          token: ${{ secrets.PAT_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      - name: update-best-of-list
        uses: best-of-lists/best-of-update-action@v0.8.5
        with:
          libraries_key: ${{ secrets.LIBRARIES_KEY }}
          github_key: ${{ secrets.PAT_TOKEN }}
      - name: push-update
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: ${{ env.BRANCH_PREFIX }}${{ env.VERSION  }}
          commit_user_name: best-of update
          commit_user_email: actions@github.com
          commit_message: Update best-of list for version ${{ env.VERSION  }}
          tagging_message: ${{ env.VERSION  }}
          skip_dirty_check: true
          commit_options: "--allow-empty"
      - name: create-pull-request
        id: create-pull-request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          branch: ${{ env.BRANCH_PREFIX }}${{ env.VERSION }}
          base: ${{ env.DEFAULT_BRANCH }}
          title: "Best-of update: ${{ env.VERSION }}"
          body: |
            To finish this update: Select <code>Merge pull request</code> below and <code>Confirm merge</code>. Also, make sure to publish the created draft release in the [releases section](../releases) as well.
          draft: false

      - name: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.VERSION  }}
          release_name: "Update: ${{ env.VERSION  }}"
          body_path: "latest-changes.md"
          draft: true
          prerelease: false

      - name: enable-auto-merge
        if: ${{ github.event_name == 'schedule' }}
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: squash

      - name: wait-for-merge
        if: ${{ github.event_name == 'schedule' }}
        run: |
          # Wait for the pull request to be merged.
          # Poll the GitHub API to check the merge status.
          for i in {1..60}; do
            PR_STATUS=$(gh pr view ${{ steps.create-pull-request.outputs.pull-request-url }} --json merged --jq '.merged')
            if [[ "$PR_STATUS" == "true" ]]; then
              echo "Pull request has been merged."
              break
            fi
            echo "Waiting for pull request to be merged..."
            sleep 30
          done
          if [[ "$PR_STATUS" != "true" ]]; then
            echo "Timed out waiting for pull request to be merged."
            exit 1
          fi

      - name: publish-release
        if: ${{ github.event_name == 'schedule' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Publish the draft release after merge completes.
          gh release edit ${{ env.VERSION }} --draft=false
